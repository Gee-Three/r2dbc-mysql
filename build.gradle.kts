import org.gradle.api.JavaVersion.VERSION_1_8
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 */

group = "dev.miku"
version = "0.8.3.BUILD-SNAPSHOT"
description = "Reactive Relational Database Connectivity - MySQL"

object Versions {
    // Kotlin
    const val kotlin = "1.4.10"
    const val coroutine = "1.3.9"
    // r2dbc + reactor
    const val r2dbc = "0.8.2.RELEASE"
    object Reactor {
        const val core =  "3.3.9.RELEASE"
        const val extra = "3.3.3.RELEASE"
        const val netty = "0.9.11.RELEASE"
    }
    // Test
    const val junit = "5.6.2"
    const val assertj = "3.17.0"
    const val mockito = "3.5.7"
    // DB - Mysql
    const val hikari = "3.4.5"
    const val testContainerMysql = "1.14.3"
    const val mysqlConnector = "8.0.21"
    const val springJDBC = "5.2.8.RELEASE"
    // Logger
    const val slf4j = "1.7.30"
    const val logback = "1.2.3"
    // Defect Detection
    const val findbug = "3.0.2"
}

plugins {
    `java-library`
    kotlin("jvm") version "1.4.10"
}

java {
    sourceCompatibility = VERSION_1_8

    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal()
    mavenCentral()
    maven("https://repo.spring.io/milestone")
    maven("https://repo.spring.io/snapshot")
    maven("http://repo.maven.apache.org/maven2")
}

tasks {
    withType(JavaCompile::class.java) {
        options.encoding = "UTF-8"
    }

    withType(KotlinCompile::class.java) {
        kotlinOptions {
            freeCompilerArgs = listOf("-Xjsr305=strict", "-Xjvm-default=enable")
            jvmTarget = "1.8"
        }
    }
}

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutine}")

    implementation("org.slf4j:slf4j-api:${Versions.slf4j}")
    implementation("io.r2dbc:r2dbc-spi:${Versions.r2dbc}")
    implementation("io.projectreactor:reactor-core:${Versions.Reactor.core}")
    implementation("io.projectreactor.addons:reactor-extra:${Versions.Reactor.extra}")
    implementation("io.projectreactor.netty:reactor-netty:${Versions.Reactor.netty}")

    testImplementation("io.r2dbc:r2dbc-spi-test:${Versions.r2dbc}")
    testImplementation("ch.qos.logback:logback-classic:${Versions.logback}")
    testImplementation("io.projectreactor:reactor-test:${Versions.Reactor.core}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${Versions.junit}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${Versions.junit}")
    testImplementation("org.assertj:assertj-core:${Versions.assertj}")
    testImplementation("org.mockito:mockito-core:${Versions.mockito}")

    testImplementation("com.zaxxer:HikariCP:${Versions.hikari}")
    testImplementation("org.testcontainers:mysql:${Versions.testContainerMysql}")
    testImplementation("mysql:mysql-connector-java:${Versions.mysqlConnector}")
    testImplementation("org.springframework:spring-jdbc:${Versions.springJDBC}")

    compileOnly("com.google.code.findbugs:jsr305:${Versions.findbug}")
}


